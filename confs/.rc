# Prezto aliases `rm` to `rm -i`. This un-does it.
unalias rm

# allows interactive comments
set -k

export PATH=$HOME/.local/bin:$HOME/bin:/usr/local/bin:/usr/local/sbin:/usr/local/texlive/2015/bin/x86_64-darwin/:$PATH

if [[ $(uname) == 'Darwin' ]]
then
    # GNU coreutils
    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi

if [[ $(uname) == 'FreeBSD' ]]
then
  alias ls="ls -Ghl"
else
  alias ls="ls --color=always -hl --time-style=long-iso --group-directories-first"
fi

alias less="less -R"
alias grep="grep --color=always"

# Python
if [ -f $HOME/envs/python2/bin/activate ]; then
  alias py2="source $HOME/envs/python2/bin/activate"
fi
if [ -f $HOME/envs/python3/bin/activate ]; then
  alias py3="source $HOME/envs/python3/bin/activate"
fi

# Go
export GOROOT=$HOME/go
export GOPATH=$HOME/gopath
export GOBIN=$GOPATH/bin
export PATH=$GOROOT/bin:$GOBIN:$PATH
alias gf="gofmt -s -w -e -l"
if which colorgo &> /dev/null; then alias go="colorgo"; fi

gprefresh() {
  go list -f "{{.Dir}}" ... 2>/dev/null | grep -v vendor > $GOPATH/.list;
}
_gpcd() {
  if [ "$#" -eq 1 ]; then
    cd $1
  else
    select p in $@; do
      _gpcd $p
      unset p
      break
    done
  fi
}
gpcd() {
  _gpcd $(echo $(grep --color=never "/$1\$" "$GOPATH/.list"))
}

repodir() {
    local old_pwd="$PWD"
    local counter="."
    while true; do
        local cur_pwd="$(echo -n $(cd $counter && pwd))"
        if [[ "$cur_pwd" == "/" ]]; then
            echo "${PWD##*/}"
            return 0
        fi
        for repo in "$cur_pwd/.git" "$cur_pwd/.hg"; do
            if [[ -d "$repo" ]]; then
                cur_pwd="$(echo -n $(cd ../$counter && pwd))"
                echo "${old_pwd#$cur_pwd/}"
                return 0
            fi
        done
        counter="../$counter"
    done
}

# Editors
export VISUAL="nvim"
export EDITOR="$VISUAL"
alias vim=nvim

# transfer.sh
transfer() { if [ $# -eq 0 ]; then echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi 
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; } 

# neovim-remote
if [ -n "${NVIM_LISTEN_ADDRESS+x}" ]; then
  alias h='nvr -o'
  alias v='nvr -O'
  alias t='nvr --remote-tab'
fi

alias nvt='nvim -c term'

alias p8='ping 8.8.8.8'
if which keybase &> /dev/null; then alias kbc="keybase chat"; fi
zstyle ':completion:*' accept-exact-dirs true

alias l='exa -gl --time-style long-iso --group-directories-first'
alias t='exa -gl --tree --time-style long-iso'

source $HOME/.zsh-histdb/sqlite-history.zsh
source $HOME/.zsh-histdb/history-timer.zsh

autoload -Uz add-zsh-hook
add-zsh-hook preexec _start_timer
add-zsh-hook precmd  _stop_timer

_zsh_autosuggest_strategy_histdb_top_here() {
    local query="select commands.argv from
history left join commands on history.command_id = commands.rowid
left join places on history.place_id = places.rowid
where places.dir LIKE '$(sql_escape $PWD)%'
and commands.argv LIKE '$(sql_escape $1)%'
group by commands.argv order by count(*) desc limit 1"
    suggestion=$(_histdb_query "$query")
}

ZSH_AUTOSUGGEST_STRATEGY=histdb_top_here

# fzf
function v() {
    if [ $# -eq 0 ]
    then
        fn=$(fzf --preview 'highlight -O xterm256 -s nightshimmer {}' --preview-window="right:70%")
        if [ -n "$fn" ]; then nvim "$fn"; fi
    else
        nvim "$@"
    fi
}

# powerline-go
function powerline_precmd() {
    PS1="$(~/gopath/bin/powerline-go -error $? -shell zsh -colorize-hostname -mode=flat)"
}
function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}
install_powerline_precmd

# make completion work for keybase
zstyle ':completion:*' accept-exact-dirs true

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [ -f $HOME/.rc.local ]; then
  source $HOME/.rc.local
fi

