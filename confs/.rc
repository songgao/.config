# allows interactive comments
set -k

export PATH=$HOME/.local/bin:$HOME/bin:/usr/local/bin:/usr/local/sbin:/usr/local/texlive/2015/bin/x86_64-darwin/:$PATH

# use GNU coreutils on macOS
if [[ $(uname) == 'Darwin' ]]
then
    # GNU coreutils
    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi

if which exa &> /dev/null; then
  alias l='exa -gl --time-style long-iso --group-directories-first'
  alias t='exa -gl --tree --time-style long-iso'
else
  alias l="ls --color=always -hl --time-style=long-iso --group-directories-first"
fi

# Prezto aliases `rm` to `rm -i`. This un-does it.
if alias rm &> /dev/null; then
  unalias rm
fi

alias grep="grep --color=auto"
alias p8='ping 8.8.8.8'

# Python
if [ -f $HOME/envs/python2/bin/activate ]; then
  alias py2="source $HOME/envs/python2/bin/activate"
fi
if [ -f $HOME/envs/python3/bin/activate ]; then
  alias py3="source $HOME/envs/python3/bin/activate"
fi

# Go
export GOROOT=$HOME/go
export GOPATH=$HOME/gopath
export GOBIN=$GOPATH/bin
export PATH=$GOROOT/bin:$GOBIN:$PATH
alias gf="gofmt -s -w -e -l"
if which colorgo &> /dev/null; then alias go="colorgo"; fi
gprefresh() {
  go list -f "{{.Dir}}" ... 2>/dev/null | grep -v vendor > $GOPATH/.list;
}
_gpcd() {
  if [ "$#" -eq 1 ]; then
    cd $1
  else
    select p in $@; do
      _gpcd $p
      unset p
      break
    done
  fi
}
gpcd() {
  _gpcd $(echo $(grep --color=never "/$1\$" "$GOPATH/.list"))
}

repodir() {
    local old_pwd="$PWD"
    local counter="."
    while true; do
        local cur_pwd="$(echo -n $(cd $counter && pwd))"
        if [[ "$cur_pwd" == "/" ]]; then
            echo "${PWD##*/}"
            return 0
        fi
        for repo in "$cur_pwd/.git" "$cur_pwd/.hg"; do
            if [[ -d "$repo" ]]; then
                cur_pwd="$(echo -n $(cd ../$counter && pwd))"
                echo "${old_pwd#$cur_pwd/}"
                return 0
            fi
        done
        counter="../$counter"
    done
}

# Editors
export VISUAL="nvim"
export EDITOR="nvim"
alias vim=nvim

# zsh-histdb
if which sqlite3 &> /dev/null; then
  source $HOME/.zsh-histdb/sqlite-history.zsh
  autoload -Uz add-zsh-hook
  add-zsh-hook precmd  histdb-update-outcome
  _zsh_autosuggest_strategy_histdb_top() {
    local query="
      select commands.argv from
      history left join commands on history.command_id = commands.rowid
      left join places on history.place_id = places.rowid
      where commands.argv LIKE '$(sql_escape $1)%'
      group by commands.argv
      order by places.dir != '$(sql_escape $PWD)', count(*) desc limit 1
    "
    suggestion=$(_histdb_query "$query")
  }
  ZSH_AUTOSUGGEST_STRATEGY=histdb_top
fi

# fzf (installation handled by the `install` script provided by fzf)
if which fzf &>/dev/null; then
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  function v() {
      if [ $# -eq 0 ]
      then
          fn=$(fzf --preview 'highlight -O xterm256 -s nightshimmer {}' --preview-window="right:70%")
          if [ -n "$fn" ]; then nvim "$fn"; fi
      else
          nvim "$@"
      fi
  }
fi

# powerline-go
if which powerline-go &>/dev/null; then
  function powerline_precmd() {
      PS1="$(~/gopath/bin/powerline-go -error $? -shell zsh -colorize-hostname -mode=flat)"
  }
  function install_powerline_precmd() {
    for s in "${precmd_functions[@]}"; do
      if [ "$s" = "powerline_precmd" ]; then
        return
      fi
    done
    precmd_functions+=(powerline_precmd)
  }
  install_powerline_precmd
fi

# make completion work for keybase
zstyle ':completion:*' accept-exact-dirs true

alias rg="rg --colors 'match:bg:yellow' --colors 'match:fg:0xA0,0xA0,0xA0' --colors 'match:style:nobold' --colors 'path:fg:green' --colors 'path:style:intense' --colors 'line:fg:yellow' --smart-case"

if [ -f $HOME/.rc.local ]; then
  source $HOME/.rc.local
fi

